name: Monorepo CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, web, api, users, orders, payments, legacy, api-java, api-ruby, api-python]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js (for api-gateway, web, users, orders)
        if: matrix.service == 'api-gateway' || matrix.service == 'web' || matrix.service == 'users' || matrix.service == 'orders'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/${{ matrix.service }}/package-lock.json

      - name: Set up .NET (for api)
        if: matrix.service == 'api'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Set up Go (for payments)
        if: matrix.service == 'payments'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Python (for api-python)
        if: matrix.service == 'api-python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Java (for api-java)
        if: matrix.service == 'api-java'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Ruby (for api-ruby)
        if: matrix.service == 'api-ruby'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.2'

      - name: Install dependencies and test
        run: |
          case "${{ matrix.service }}" in
            api-gateway|web|users|orders)
              cd apps/${{ matrix.service }}
              npm ci
              npm run test
              npm run lint
              ;;
            api)
              cd apps/${{ matrix.service }}
              dotnet restore
              dotnet test
              ;;
            payments)
              cd apps/${{ matrix.service }}
              go mod download
              go test ./...
              ;;
            api-python)
              cd apps/django-boilerplate
              pip install -r requirements.txt
              python -m pytest
              ;;
            api-java)
              cd apps/spring-boilerplate
              ./mvnw test
              ;;
            api-ruby)
              cd apps/ruby-rails-boilerplate
              rails test
              ;;
            legacy)
              echo "Legacy PHP service - skipping tests"
              ;;
          esac

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [api-gateway, web, api, users, orders, payments, legacy, api-java, api-ruby, api-python]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/${{ matrix.service }}.Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/adidas-${{ matrix.service }}:latest
            ${{ env.DOCKER_USERNAME }}/adidas-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Deploy to Vercel (Frontend)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
