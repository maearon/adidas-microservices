generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("PRISMA_DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model AspNetRoleClaims {
  Id         Int     @id
  RoleId     String
  ClaimType  String?
  ClaimValue String?

  @@index([RoleId], map: "IX_AspNetRoleClaims_RoleId")
}

model AspNetRoles {
  Id               String            @id(map: "PK_AspNetRoles")
  Name             String?           @db.VarChar(256)
  NormalizedName   String?           @unique(map: "RoleNameIndex") @db.VarChar(256)
  ConcurrencyStamp String?
  AspNetUserRoles  AspNetUserRoles[]
}

model AspNetUserClaims {
  Id          Int         @id
  UserId      String
  ClaimType   String?
  ClaimValue  String?
  AspNetUsers AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserClaims_AspNetUsers_UserId")

  @@index([UserId], map: "IX_AspNetUserClaims_UserId")
}

model AspNetUserLogins {
  LoginProvider       String
  ProviderKey         String
  ProviderDisplayName String?
  UserId              String
  AspNetUsers         AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserLogins_AspNetUsers_UserId")

  @@id([LoginProvider, ProviderKey])
  @@index([UserId], map: "IX_AspNetUserLogins_UserId")
}

model AspNetUserRoles {
  UserId      String
  RoleId      String
  AspNetRoles AspNetRoles @relation(fields: [RoleId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserRoles_AspNetRoles_RoleId")
  AspNetUsers AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserRoles_AspNetUsers_UserId")

  @@id([UserId, RoleId])
  @@index([RoleId], map: "IX_AspNetUserRoles_RoleId")
}

model AspNetUserTokens {
  UserId        String
  LoginProvider String
  Name          String
  Value         String?
  AspNetUsers   AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_AspNetUserTokens_AspNetUsers_UserId")

  @@id([UserId, LoginProvider, Name])
}

model AspNetUsers {
  Id                                                  String             @id
  Name                                                String             @db.VarChar(50)
  ActivationDigest                                    String?
  Activated                                           Boolean
  ActivatedAt                                         DateTime?          @db.Timestamptz(6)
  RememberDigest                                      String?
  ResetDigest                                         String?
  ResetSentAt                                         DateTime?          @db.Timestamptz(6)
  CreatedAt                                           DateTime           @db.Timestamptz(6)
  UpdatedAt                                           DateTime           @db.Timestamptz(6)
  Admin                                               Boolean
  UserName                                            String?            @db.VarChar(256)
  NormalizedUserName                                  String?            @unique(map: "UserNameIndex") @db.VarChar(256)
  Email                                               String?            @db.VarChar(256)
  NormalizedEmail                                     String?            @db.VarChar(256)
  EmailConfirmed                                      Boolean
  PasswordHash                                        String?
  SecurityStamp                                       String?
  ConcurrencyStamp                                    String?
  PhoneNumber                                         String?
  PhoneNumberConfirmed                                Boolean
  TwoFactorEnabled                                    Boolean
  LockoutEnd                                          DateTime?          @db.Timestamptz(6)
  LockoutEnabled                                      Boolean
  AccessFailedCount                                   Int
  AspNetUserClaims                                    AspNetUserClaims[]
  AspNetUserLogins                                    AspNetUserLogins[]
  AspNetUserRoles                                     AspNetUserRoles[]
  AspNetUserTokens                                    AspNetUserTokens[]
  Microposts                                          Microposts[]
  Relationships_Relationships_FollowedIdToAspNetUsers Relationships[]    @relation("Relationships_FollowedIdToAspNetUsers")
  Relationships_Relationships_FollowerIdToAspNetUsers Relationships[]    @relation("Relationships_FollowerIdToAspNetUsers")

  @@index([NormalizedEmail], map: "EmailIndex")
}

model Game {
  id          String     @id
  userId      String
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  users       users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Question    Question[]

  @@index([userId])
}

model Microposts {
  Id          BigInt      @id
  Content     String      @db.VarChar(140)
  UserId      String
  ImagePath   String?
  CreatedAt   DateTime    @db.Timestamptz(6)
  UpdatedAt   DateTime    @db.Timestamptz(6)
  AspNetUsers AspNetUsers @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Microposts_AspNetUsers_UserId")

  @@index([UserId], map: "IX_Microposts_UserId")
}

model Question {
  id                String   @id
  question          String
  answer            String
  gameId            String
  options           Json?
  percentageCorrect Float?
  isCorrect         Boolean?
  questionType      GameType
  userAnswer        String?
  Game              Game     @relation(fields: [gameId], references: [id])

  @@index([gameId])
}

model Relationships {
  FollowerId                                        String
  FollowedId                                        String
  CreatedAt                                         DateTime    @db.Timestamptz(6)
  UpdatedAt                                         DateTime    @db.Timestamptz(6)
  AspNetUsers_Relationships_FollowedIdToAspNetUsers AspNetUsers @relation("Relationships_FollowedIdToAspNetUsers", fields: [FollowedId], references: [Id], onUpdate: NoAction, map: "FK_Relationships_AspNetUsers_FollowedId")
  AspNetUsers_Relationships_FollowerIdToAspNetUsers AspNetUsers @relation("Relationships_FollowerIdToAspNetUsers", fields: [FollowerId], references: [Id], onUpdate: NoAction, map: "FK_Relationships_AspNetUsers_FollowerId")

  @@id([FollowerId, FollowedId])
  @@index([FollowedId], map: "IX_Relationships_FollowedId")
}

model EFMigrationsHistory {
  MigrationId    String @id @db.VarChar(150)
  ProductVersion String @db.VarChar(32)

  @@map("__EFMigrationsHistory")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model account_emailaddress {
  id                        Int                         @id
  email                     String                      @db.VarChar(254)
  verified                  Boolean
  primary                   Boolean
  user_id                   BigInt
  accounts_user             accounts_user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_emailaddress_user_id_2c513194_fk_accounts_user_id")
  account_emailconfirmation account_emailconfirmation[]

  @@unique([user_id, email], map: "account_emailaddress_user_id_email_987c8728_uniq")
  @@index([email], map: "account_emailaddress_email_03be32b2")
  @@index([email], map: "account_emailaddress_email_03be32b2_like")
  @@index([user_id], map: "account_emailaddress_user_id_2c513194")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model account_emailconfirmation {
  id                   Int                  @id
  created              DateTime             @db.Timestamptz(6)
  sent                 DateTime?            @db.Timestamptz(6)
  key                  String               @unique @db.VarChar(64)
  email_address_id     Int
  account_emailaddress account_emailaddress @relation(fields: [email_address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_emailconfirm_email_address_id_5b7f8c58_fk_account_e")

  @@index([email_address_id], map: "account_emailconfirmation_email_address_id_5b7f8c58")
  @@index([key], map: "account_emailconfirmation_key_f43612bd_like")
}

model accounts_user {
  id                                                                               BigInt                             @id
  password                                                                         String                             @db.VarChar(128)
  last_login                                                                       DateTime?                          @db.Timestamptz(6)
  is_superuser                                                                     Boolean
  username                                                                         String                             @unique @db.VarChar(150)
  first_name                                                                       String                             @db.VarChar(150)
  last_name                                                                        String                             @db.VarChar(150)
  is_staff                                                                         Boolean
  is_active                                                                        Boolean
  date_joined                                                                      DateTime                           @db.Timestamptz(6)
  email                                                                            String                             @unique @db.VarChar(254)
  name                                                                             String                             @db.VarChar(50)
  admin                                                                            Boolean?
  activated                                                                        Boolean
  activated_at                                                                     DateTime?                          @db.Timestamptz(6)
  remember_digest                                                                  String?                            @db.VarChar(255)
  activation_digest                                                                String?                            @db.VarChar(255)
  reset_digest                                                                     String?                            @db.VarChar(255)
  reset_sent_at                                                                    DateTime?                          @db.Timestamptz(6)
  created_at                                                                       DateTime                           @db.Timestamptz(6)
  updated_at                                                                       DateTime                           @db.Timestamptz(6)
  account_emailaddress                                                             account_emailaddress[]
  accounts_user_groups                                                             accounts_user_groups[]
  accounts_user_user_permissions                                                   accounts_user_user_permissions[]
  django_admin_log                                                                 django_admin_log[]
  microposts_micropost                                                             microposts_micropost[]
  relationships_relationship_relationships_relationship_followed_idToaccounts_user relationships_relationship[]       @relation("relationships_relationship_followed_idToaccounts_user")
  relationships_relationship_relationships_relationship_follower_idToaccounts_user relationships_relationship[]       @relation("relationships_relationship_follower_idToaccounts_user")
  socialaccount_socialaccount                                                      socialaccount_socialaccount[]
  token_blacklist_outstandingtoken                                                 token_blacklist_outstandingtoken[]

  @@index([email], map: "accounts_user_email_b2644a56_like")
  @@index([username], map: "accounts_user_username_6088629e_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model accounts_user_groups {
  id            BigInt        @id
  user_id       BigInt
  group_id      Int
  auth_group    auth_group    @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accounts_user_groups_group_id_bd11a704_fk_auth_group_id")
  accounts_user accounts_user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accounts_user_groups_user_id_52b62117_fk_accounts_user_id")

  @@unique([user_id, group_id], map: "accounts_user_groups_user_id_group_id_59c0b32f_uniq")
  @@index([group_id], map: "accounts_user_groups_group_id_bd11a704")
  @@index([user_id], map: "accounts_user_groups_user_id_52b62117")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model accounts_user_user_permissions {
  id              BigInt          @id
  user_id         BigInt
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accounts_user_user_p_permission_id_113bb443_fk_auth_perm")
  accounts_user   accounts_user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accounts_user_user_p_user_id_e4f0a161_fk_accounts_")

  @@unique([user_id, permission_id], map: "accounts_user_user_permi_user_id_permission_id_2ab516c2_uniq")
  @@index([permission_id], map: "accounts_user_user_permissions_permission_id_113bb443")
  @@index([user_id], map: "accounts_user_user_permissions_user_id_e4f0a161")
}

model active_storage_attachments {
  id                   BigInt               @id @default(autoincrement())
  name                 String               @db.VarChar
  record_type          String               @db.VarChar
  record_id            BigInt
  blob_id              BigInt
  created_at           DateTime             @db.Timestamp(6)
  active_storage_blobs active_storage_blobs @relation(fields: [blob_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_c3b3935057")

  @@unique([record_type, record_id, name, blob_id], map: "index_active_storage_attachments_uniqueness")
  @@index([blob_id], map: "index_active_storage_attachments_on_blob_id")
}

model active_storage_blobs {
  id                             BigInt                           @id @default(autoincrement())
  key                            String                           @unique(map: "index_active_storage_blobs_on_key") @db.VarChar
  filename                       String                           @db.VarChar
  content_type                   String?                          @db.VarChar
  metadata                       String?
  service_name                   String                           @db.VarChar
  byte_size                      BigInt
  checksum                       String?                          @db.VarChar
  created_at                     DateTime                         @db.Timestamp(6)
  active_storage_attachments     active_storage_attachments[]
  active_storage_variant_records active_storage_variant_records[]
}

model active_storage_variant_records {
  id                   BigInt               @id @default(autoincrement())
  blob_id              BigInt
  variation_digest     String               @db.VarChar
  active_storage_blobs active_storage_blobs @relation(fields: [blob_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_993965df05")

  @@unique([blob_id, variation_digest], map: "index_active_storage_variant_records_uniqueness")
}

model ar_internal_metadata {
  key        String   @id @db.VarChar
  value      String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
}

model auth_group {
  id                     Int                      @id
  name                   String                   @unique @db.VarChar(150)
  accounts_user_groups   accounts_user_groups[]
  auth_group_permissions auth_group_permissions[]

  @@index([name], map: "auth_group_name_a6ea08ec_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_group_permissions {
  id              BigInt          @id
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([group_id], map: "auth_group_permissions_group_id_b120cbf9")
  @@index([permission_id], map: "auth_group_permissions_permission_id_84c5c92e")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_permission {
  id                             Int                              @id
  name                           String                           @db.VarChar(255)
  content_type_id                Int
  codename                       String                           @db.VarChar(100)
  accounts_user_user_permissions accounts_user_user_permissions[]
  auth_group_permissions         auth_group_permissions[]
  django_content_type            django_content_type              @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
  @@index([content_type_id], map: "auth_permission_content_type_id_2f476e4b")
}

model bookmarks {
  id        String   @id
  userId    String
  postId    String
  createdAt DateTime @default(now())
  posts     posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model cart_items {
  id         BigInt   @id @default(autoincrement())
  quantity   Int?
  cart_id    BigInt
  product_id BigInt
  variant_id BigInt
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  size       String?  @db.VarChar(255)
  variants   variants @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5e1fd37f08")
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_681a180e84")

  @@index([size], map: "idx_cart_items_size")
  @@index([cart_id], map: "index_cart_items_on_cart_id")
  @@index([product_id], map: "index_cart_items_on_product_id")
  @@index([variant_id], map: "index_cart_items_on_variant_id")
}

model carts {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  user_id    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@index([user_id], map: "idx_carts_user_id")
}

model categories {
  id               Int          @id @default(autoincrement())
  name             String       @db.VarChar
  slug             String       @unique @db.VarChar
  parent_id        Int?
  created_at       DateTime?    @default(now()) @db.Timestamp(6)
  updated_at       DateTime?    @default(now()) @db.Timestamp(6)
  categories       categories?  @relation("categoriesTocategories", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_categories categories[] @relation("categoriesTocategories")
  products         products[]
}

model collaborations {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique @db.VarChar(100)
  slug                    String                    @unique @db.VarChar(100)
  description             String?
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  collaborations_products collaborations_products[]
  products                products[]
}

model collaborations_products {
  product_id       BigInt
  collaboration_id Int
  collaborations   collaborations @relation(fields: [collaboration_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products         products       @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, collaboration_id])
}

model comments {
  id        String   @id
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  posts     posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model django_admin_log {
  id                  Int                  @id
  action_time         DateTime             @db.Timestamptz(6)
  object_id           String?
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.SmallInt
  change_message      String
  content_type_id     Int?
  user_id             BigInt
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  accounts_user       accounts_user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_user_id_c564eba6_fk_accounts_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6")
}

model django_content_type {
  id               Int                @id
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.Timestamptz(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String
  expire_date  DateTime @db.Timestamptz(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
  @@index([session_key], map: "django_session_session_key_c0390e0f_like")
}

model django_site {
  id                            Int                             @id
  domain                        String                          @unique(map: "django_site_domain_a2e37b91_uniq") @db.VarChar(100)
  name                          String                          @db.VarChar(50)
  socialaccount_socialapp_sites socialaccount_socialapp_sites[]

  @@index([domain], map: "django_site_domain_a2e37b91_like")
}

model events_event {
  id          BigInt   @id
  title       String   @db.VarChar(200)
  description String
  location    String   @db.VarChar(255)
  latitude    Float
  longitude   Float
  timestamp   DateTime @db.Timestamptz(6)
}

model follows {
  followerId                       String
  followingId                      String
  users_follows_followerIdTousers  users  @relation("follows_followerIdTousers", fields: [followerId], references: [id], onDelete: Cascade)
  users_follows_followingIdTousers users  @relation("follows_followingIdTousers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model guest_cart_items {
  id            BigInt      @id @default(autoincrement())
  quantity      Int?
  guest_cart_id BigInt
  product_id    BigInt
  variant_id    BigInt
  created_at    DateTime    @db.Timestamp(6)
  updated_at    DateTime    @db.Timestamp(6)
  size          String?     @db.VarChar(255)
  guest_carts   guest_carts @relation(fields: [guest_cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_3bdfea312e")
  products      products    @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_4ba9457f5f")
  variants      variants    @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_603cdced22")

  @@index([size], map: "idx_guest_cart_items_size")
  @@index([guest_cart_id], map: "index_guest_cart_items_on_guest_cart_id")
  @@index([product_id], map: "index_guest_cart_items_on_product_id")
  @@index([variant_id], map: "index_guest_cart_items_on_variant_id")
}

model guest_carts {
  id               BigInt             @id @default(autoincrement())
  created_at       DateTime           @db.Timestamp(6)
  updated_at       DateTime           @db.Timestamp(6)
  guest_cart_items guest_cart_items[]
}

model guest_wish_items {
  id            BigInt       @id @default(autoincrement())
  guest_wish_id BigInt
  product_id    BigInt
  variant_id    BigInt
  created_at    DateTime     @db.Timestamp(6)
  updated_at    DateTime     @db.Timestamp(6)
  variants      variants     @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5004853ca5")
  guest_wishes  guest_wishes @relation(fields: [guest_wish_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_df1d3a30db")
  products      products     @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_ed1f2f0948")

  @@index([guest_wish_id], map: "index_guest_wish_items_on_guest_wish_id")
  @@index([product_id], map: "index_guest_wish_items_on_product_id")
  @@index([variant_id], map: "index_guest_wish_items_on_variant_id")
}

model guest_wishes {
  id               BigInt             @id @default(autoincrement())
  created_at       DateTime           @db.Timestamp(6)
  updated_at       DateTime           @db.Timestamp(6)
  guest_wish_items guest_wish_items[]
}

model likes {
  userId String
  postId String
  posts  posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
  users  users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model messages {
  id         String       @id
  content    String
  type       MessageType? @default(TEXT)
  room_id    String
  user_id    String
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at DateTime?    @default(now()) @db.Timestamptz(6)
  is_ai      Boolean?     @default(false)
  rooms      rooms        @relation(fields: [room_id], references: [id], onDelete: Cascade, map: "fk_room")
  users      users        @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user")

  @@index([room_id], map: "index_messages_on_room_id")
  @@index([room_id, created_at], map: "index_messages_on_room_id_and_created_at")
  @@index([user_id], map: "index_messages_on_user_id")
  @@index([user_id, created_at], map: "index_messages_on_user_id_and_created_at")
}

model microposts {
  id         BigInt   @id @default(autoincrement())
  content    String?
  user_id    String
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_558c81314b")

  @@index([user_id], map: "index_microposts_on_user_id")
  @@index([user_id, created_at], map: "index_microposts_on_user_id_and_created_at")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model microposts_micropost {
  id            BigInt        @id
  content       String
  picture       String?       @db.VarChar(100)
  created_at    DateTime      @db.Timestamptz(6)
  updated_at    DateTime      @db.Timestamptz(6)
  user_id       BigInt
  accounts_user accounts_user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "microposts_micropost_user_id_e146449e_fk_accounts_user_id")

  @@index([user_id], map: "microposts_micropost_user_id_e146449e")
}

model model_bases {
  id          BigInt    @id @default(autoincrement())
  name        String    @db.VarChar
  slug        String    @unique @db.VarChar
  description String?
  image_url   String?   @db.VarChar
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  models      models[]

  @@index([slug], map: "index_model_bases_on_slug")
}

model models {
  id            BigInt      @id @default(autoincrement())
  model_base_id BigInt
  name          String      @db.VarChar
  slug          String      @unique @db.VarChar
  description   String?
  release_date  DateTime?   @db.Date
  hero_image    String?     @db.VarChar
  tech_specs    Json?
  created_at    DateTime?   @default(now()) @db.Timestamp(6)
  updated_at    DateTime?   @default(now()) @db.Timestamp(6)
  model_bases   model_bases @relation(fields: [model_base_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products      products[]

  @@index([slug], map: "index_models_on_slug")
}

model notifications {
  id                                     String           @id
  recipientId                            String
  issuerId                               String
  postId                                 String?
  type                                   NotificationType
  read                                   Boolean          @default(false)
  createdAt                              DateTime         @default(now())
  users_notifications_issuerIdTousers    users            @relation("notifications_issuerIdTousers", fields: [issuerId], references: [id], onDelete: Cascade)
  posts                                  posts?           @relation(fields: [postId], references: [id], onDelete: Cascade)
  users_notifications_recipientIdTousers users            @relation("notifications_recipientIdTousers", fields: [recipientId], references: [id], onDelete: Cascade)
}

model order_items {
  id         BigInt   @id @default(autoincrement())
  quantity   Int?
  order_id   BigInt
  product_id BigInt
  variant_id BigInt
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  variants   variants @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_476172d337")
  orders     orders   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_e3cb28f071")
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_f1a29ddd47")

  @@index([order_id], map: "index_order_items_on_order_id")
  @@index([product_id], map: "index_order_items_on_product_id")
  @@index([variant_id], map: "index_order_items_on_variant_id")
}

model orders {
  id          BigInt        @id @default(autoincrement())
  user_id     BigInt
  created_at  DateTime      @db.Timestamp(6)
  updated_at  DateTime      @db.Timestamp(6)
  order_items order_items[]

  @@index([user_id], map: "index_orders_on_user_id")
}

model post_media {
  id         String    @id
  postId     String?
  media_type MediaType
  url        String
  createdAt  DateTime  @default(now())
  posts      posts?    @relation(fields: [postId], references: [id])
}

model posts {
  id            String          @id
  content       String
  userId        String
  createdAt     DateTime        @default(now())
  expiresAt     DateTime?       @default(now()) @db.Timestamp(6)
  bookmarks     bookmarks[]
  comments      comments[]
  likes         likes[]
  notifications notifications[]
  post_media    post_media[]
  users         users           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model products {
  id                      BigInt                    @id @default(autoincrement())
  name                    String?                   @db.VarChar
  model_number            String                    @unique(map: "index_products_on_model_number") @db.VarChar
  gender                  String?                   @db.VarChar
  franchise               String?                   @db.VarChar
  product_type            String?                   @db.VarChar
  brand                   String?                   @db.VarChar
  category                String?                   @db.VarChar
  sport                   String?                   @db.VarChar
  description_h5          String?
  description_p           String?
  specifications          String?
  care                    String?
  created_at              DateTime                  @db.Timestamp(6)
  updated_at              DateTime                  @db.Timestamp(6)
  category_id             Int?
  slug                    String?                   @unique(map: "index_products_on_slug") @db.VarChar
  status                  String?                   @default("active") @db.VarChar
  is_featured             Boolean?                  @default(false)
  badge                   String?                   @db.VarChar
  model_base_id           BigInt?
  model_id                BigInt?
  collaboration_id        Int?
  activity                String?                   @db.VarChar
  material                String?                   @db.VarChar
  collection              String?                   @db.VarChar
  cart_items              cart_items[]
  collaborations_products collaborations_products[]
  guest_cart_items        guest_cart_items[]
  guest_wish_items        guest_wish_items[]
  order_items             order_items[]
  categories              categories?               @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_products_category")
  collaborations          collaborations?           @relation(fields: [collaboration_id], references: [id], onUpdate: NoAction, map: "fk_products_collaborations")
  models                  models?                   @relation(fields: [model_id], references: [id], onUpdate: NoAction, map: "fk_products_models")
  products_tags           products_tags[]
  reviews                 reviews[]
  variants                variants[]
  wish_items              wish_items[]

  @@index([category_id], map: "index_products_on_category_id")
}

model products_tags {
  id         Int       @id @default(autoincrement())
  product_id BigInt
  tag_id     Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags       tags      @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model projects {
  id          BigInt   @id @default(autoincrement())
  name        String?  @db.VarChar
  description String?  @db.VarChar
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)
  tasks       tasks[]
}

model relationships {
  id          BigInt   @id @default(autoincrement())
  follower_id String?
  followed_id String?
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)

  @@unique([follower_id, followed_id], map: "index_relationships_on_follower_id_and_followed_id")
  @@index([followed_id], map: "index_relationships_on_followed_id")
  @@index([follower_id], map: "index_relationships_on_follower_id")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model relationships_relationship {
  id                                                                  BigInt        @id
  created_at                                                          DateTime      @db.Timestamptz(6)
  followed_id                                                         BigInt
  follower_id                                                         BigInt
  accounts_user_relationships_relationship_followed_idToaccounts_user accounts_user @relation("relationships_relationship_followed_idToaccounts_user", fields: [followed_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "relationships_relati_followed_id_571ba2f9_fk_accounts_")
  accounts_user_relationships_relationship_follower_idToaccounts_user accounts_user @relation("relationships_relationship_follower_idToaccounts_user", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "relationships_relati_follower_id_2f35aab6_fk_accounts_")

  @@unique([follower_id, followed_id], map: "relationships_relationsh_follower_id_followed_id_1b8dba39_uniq")
  @@index([followed_id], map: "relationships_relationship_followed_id_571ba2f9")
  @@index([follower_id], map: "relationships_relationship_follower_id_2f35aab6")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id         BigInt   @id @default(autoincrement())
  content    String?
  product_id BigInt
  user_id    BigInt
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  rating     Int?
  status     String?  @default("approved") @db.VarChar
  title      String?  @db.VarChar
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_bedd9094d4")

  @@index([product_id], map: "index_reviews_on_product_id")
  @@index([user_id], map: "index_reviews_on_user_id")
}

model rooms {
  id              String     @id
  name            String
  type            String     @default("public")
  last_message    String?
  last_message_at DateTime?  @db.Timestamptz(6)
  created_at      DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?  @default(now()) @db.Timestamptz(6)
  messages        messages[]
}

model schema_migrations {
  version String @id @db.VarChar
}

model sessions {
  id        String   @id
  userId    String
  expiresAt DateTime
  payload   Json?
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sizes {
  id            Int             @id @default(autoincrement())
  label         String          @db.VarChar(10)
  system        String          @db.VarChar(20)
  location      String          @db.VarChar(10)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  variant_sizes variant_sizes[]
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model socialaccount_socialaccount {
  id                        Int                         @id
  provider                  String                      @db.VarChar(200)
  uid                       String                      @db.VarChar(191)
  last_login                DateTime                    @db.Timestamptz(6)
  date_joined               DateTime                    @db.Timestamptz(6)
  extra_data                Json
  user_id                   BigInt
  accounts_user             accounts_user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_user_id_8146e70c_fk_accounts_")
  socialaccount_socialtoken socialaccount_socialtoken[]

  @@unique([provider, uid], map: "socialaccount_socialaccount_provider_uid_fc810c6e_uniq")
  @@index([user_id], map: "socialaccount_socialaccount_user_id_8146e70c")
}

model socialaccount_socialapp {
  id                            Int                             @id
  provider                      String                          @db.VarChar(30)
  name                          String                          @db.VarChar(40)
  client_id                     String                          @db.VarChar(191)
  secret                        String                          @db.VarChar(191)
  key                           String                          @db.VarChar(191)
  provider_id                   String                          @db.VarChar(200)
  settings                      Json
  socialaccount_socialapp_sites socialaccount_socialapp_sites[]
  socialaccount_socialtoken     socialaccount_socialtoken[]
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model socialaccount_socialapp_sites {
  id                      BigInt                  @id
  socialapp_id            Int
  site_id                 Int
  django_site             django_site             @relation(fields: [site_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_site_id_2579dee5_fk_django_si")
  socialaccount_socialapp socialaccount_socialapp @relation(fields: [socialapp_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_socialapp_id_97fb6e7d_fk_socialacc")

  @@unique([socialapp_id, site_id], map: "socialaccount_socialapp__socialapp_id_site_id_71a9a768_uniq")
  @@index([site_id], map: "socialaccount_socialapp_sites_site_id_2579dee5")
  @@index([socialapp_id], map: "socialaccount_socialapp_sites_socialapp_id_97fb6e7d")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model socialaccount_socialtoken {
  id                          Int                         @id
  token                       String
  token_secret                String
  expires_at                  DateTime?                   @db.Timestamptz(6)
  account_id                  Int
  app_id                      Int?
  socialaccount_socialaccount socialaccount_socialaccount @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_account_id_951f210e_fk_socialacc")
  socialaccount_socialapp     socialaccount_socialapp?    @relation(fields: [app_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_app_id_636a42d7_fk_socialacc")

  @@unique([app_id, account_id], map: "socialaccount_socialtoken_app_id_account_id_fca4e0ac_uniq")
  @@index([account_id], map: "socialaccount_socialtoken_account_id_951f210e")
  @@index([app_id], map: "socialaccount_socialtoken_app_id_636a42d7")
}

model tags {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  slug          String          @unique(map: "index_tags_on_slug") @db.VarChar(255)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  products_tags products_tags[]
}

model tasks {
  id          BigInt    @id @default(autoincrement())
  description String?   @db.VarChar
  done        Boolean?
  project_id  BigInt?
  created_at  DateTime  @db.Timestamp(6)
  updated_at  DateTime  @db.Timestamp(6)
  projects    projects? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_02e851e3b7")

  @@index([project_id], map: "index_tasks_on_project_id")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model token_blacklist_blacklistedtoken {
  id                               BigInt                           @id
  blacklisted_at                   DateTime                         @db.Timestamptz(6)
  token_id                         BigInt                           @unique
  token_blacklist_outstandingtoken token_blacklist_outstandingtoken @relation(fields: [token_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_blacklist_blacklistedtoken_token_id_3cc7fe56_fk")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model token_blacklist_outstandingtoken {
  id                               BigInt                            @id
  token                            String
  created_at                       DateTime?                         @db.Timestamptz(6)
  expires_at                       DateTime                          @db.Timestamptz(6)
  user_id                          BigInt?
  jti                              String                            @unique(map: "token_blacklist_outstandingtoken_jti_hex_d9bdf6f7_uniq") @db.VarChar(255)
  token_blacklist_blacklistedtoken token_blacklist_blacklistedtoken?
  accounts_user                    accounts_user?                    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_blacklist_outs_user_id_83bc629a_fk_accounts_")

  @@index([jti], map: "token_blacklist_outstandingtoken_jti_hex_d9bdf6f7_like")
  @@index([user_id], map: "token_blacklist_outstandingtoken_user_id_83bc629a")
}

model topic_count {
  id    String @id
  topic String @unique
  count Int
}

model user_providers {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String
  provider         String    @db.VarChar(50)
  provider_user_id String
  email            String?
  name             String?
  avatar_url       String?
  access_token     String?
  refresh_token    String?
  raw_data         Json?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, provider_user_id])
}

model users {
  id                                             String           @id
  name                                           String?          @db.VarChar
  username                                       String           @unique
  displayName                                    String
  email                                          String?          @unique(map: "index_admin_users_email_uniqueness") @db.VarChar
  refresh_token                                  String?          @unique(map: "index_admin_users_refresh_token_uniqueness") @db.VarChar
  refresh_token_expiration_at                    DateTime?        @db.Timestamp(6)
  created_at                                     DateTime         @db.Timestamp(6)
  createdAt                                      DateTime         @default(now())
  updated_at                                     DateTime         @db.Timestamp(6)
  password_digest                                String?          @db.VarChar
  passwordHash                                   String?
  googleId                                       String?          @unique
  avatarUrl                                      String?
  bio                                            String?
  remember_digest                                String?          @db.VarChar
  admin                                          Boolean?         @default(false)
  activation_digest                              String?          @db.VarChar
  activated                                      Boolean?         @default(false)
  activated_at                                   DateTime?        @db.Timestamp(6)
  reset_digest                                   String?          @db.VarChar
  reset_sent_at                                  DateTime?        @db.Timestamp(6)
  is_staff                                       Boolean          @default(false)
  is_active                                      Boolean          @default(true)
  date_joined                                    DateTime         @default(now()) @db.Timestamptz(6)
  last_login                                     DateTime?        @db.Timestamptz(6)
  is_superuser                                   Boolean          @default(false)
  password                                       String           @default("pbkdf2_sha256$720000$mf7gOJi6b6lcClmMxd0UaY$JEXwqKpSjnuNmBE42U9DFtjLO6x2fIPCnOQ9oA59iHo=") @db.VarChar
  first_name                                     String           @default("") @db.VarChar
  last_name                                      String           @default("") @db.VarChar
  provider                                       String?          @db.VarChar(50)
  avatar                                         String?
  updatedAt                                      DateTime?        @default(now()) @db.Timestamptz(6)
  Account                                        Account[]
  Game                                           Game[]
  bookmarks                                      bookmarks[]
  carts                                          carts[]
  comments                                       comments[]
  follows_follows_followerIdTousers              follows[]        @relation("follows_followerIdTousers")
  follows_follows_followingIdTousers             follows[]        @relation("follows_followingIdTousers")
  likes                                          likes[]
  messages                                       messages[]
  microposts                                     microposts[]
  notifications_notifications_issuerIdTousers    notifications[]  @relation("notifications_issuerIdTousers")
  notifications_notifications_recipientIdTousers notifications[]  @relation("notifications_recipientIdTousers")
  posts                                          posts[]
  sessions                                       sessions[]
  user_providers                                 user_providers[]
}

model users_for_mailer_tests {
  id                          String    @id
  name                        String?   @db.VarChar
  username                    String    @unique(map: "mailer_users_username_key")
  displayName                 String
  email                       String?   @unique(map: "index_mailer_users_email_uniqueness") @db.VarChar
  refresh_token               String?   @unique(map: "index_mailer_users_refresh_token_uniqueness") @db.VarChar
  refresh_token_expiration_at DateTime? @db.Timestamp(6)
  created_at                  DateTime  @db.Timestamp(6)
  createdAt                   DateTime  @default(now())
  updated_at                  DateTime  @db.Timestamp(6)
  password_digest             String?   @db.VarChar
  passwordHash                String?
  googleId                    String?   @unique(map: "mailer_users_googleId_key")
  avatarUrl                   String?
  bio                         String?
  remember_digest             String?   @db.VarChar
  admin                       Boolean?  @default(false)
  activation_digest           String?   @db.VarChar
  activated                   Boolean?  @default(false)
  activated_at                DateTime? @db.Timestamp(6)
  reset_digest                String?   @db.VarChar
  reset_sent_at               DateTime? @db.Timestamp(6)
  is_staff                    Boolean   @default(false)
  is_active                   Boolean   @default(true)
  date_joined                 DateTime  @default(now()) @db.Timestamp(6)
  last_login                  DateTime? @db.Timestamp(6)
  is_superuser                Boolean   @default(false)
  password                    String    @default("pbkdf2_sha256$720000$mf7gOJi6b6lcClmMxd0UaY$JEXwqKpSjnuNmBE42U9DFtjLO6x2fIPCnOQ9oA59iHo=") @db.VarChar
  first_name                  String    @default("") @db.VarChar
  last_name                   String    @default("") @db.VarChar
  provider                    String?   @db.VarChar(50)
}

model variant_sizes {
  id         Int       @id @default(autoincrement())
  variant_id BigInt
  size_id    Int
  stock      Int?      @default(0)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  sizes      sizes     @relation(fields: [size_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_size")
  variants   variants  @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_variant")
}

model variants {
  id               BigInt             @id @default(autoincrement())
  color            String?            @db.VarChar
  price            Float
  compare_at_price Float?
  variant_code     String?
  stock            Int?
  product_id       BigInt
  created_at       DateTime           @db.Timestamp(6)
  updated_at       DateTime           @db.Timestamp(6)
  cart_items       cart_items[]
  guest_cart_items guest_cart_items[]
  guest_wish_items guest_wish_items[]
  order_items      order_items[]
  variant_sizes    variant_sizes[]
  products         products           @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_19f8efee69")
  wish_items       wish_items[]

  @@unique([product_id, color], map: "unique_product_color")
  @@index([product_id], map: "index_variants_on_product_id")
}

model wish_items {
  id         BigInt   @id @default(autoincrement())
  wish_id    BigInt
  product_id BigInt
  variant_id BigInt
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  variants   variants @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_5fe4dae293")
  wishes     wishes   @relation(fields: [wish_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_6357d5ef81")
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_f4c6b03fcc")

  @@index([product_id], map: "index_wish_items_on_product_id")
  @@index([variant_id], map: "index_wish_items_on_variant_id")
  @@index([wish_id], map: "index_wish_items_on_wish_id")
}

model wishes {
  id         BigInt       @id @default(autoincrement())
  user_id    BigInt
  created_at DateTime     @db.Timestamp(6)
  updated_at DateTime     @db.Timestamp(6)
  wish_items wish_items[]

  @@index([user_id], map: "index_wishes_on_user_id")
}

enum GameType {
  mcq
  open_ended
}

enum MediaType {
  IMAGE
  VIDEO
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
